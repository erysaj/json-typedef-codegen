// Code generated by jtd-codegen for Swift v0.2.1

import Foundation

/// A Feature object represents a spatially bounded thing.  Every
/// Feature object is a GeoJSON object no matter where it occurs in a
/// GeoJSON text.
/// 
/// o  A Feature object has a "type" member with the value "Feature".
/// 
/// o  A Feature object has a member with the name "geometry".  The
///     value of the geometry member SHALL be either a Geometry object
///     as defined above or, in the case that the Feature is unlocated,
///     a JSON null value.
/// 
/// o  A Feature object has a member with the name "properties".  The
///     value of the properties member is an object (any JSON object or
///     a JSON null value).
public struct GeojsonObjectFeature: Codable {
    /// The GeoJSON specification requires that these elements be
    /// GeoJSON geometry objects, but such a constraint can't be
    /// expressed in JSON Type Definition.
    /// 
    /// It is semantically invalid at the GeoJSON level for this
    /// member to be any GeoJSON object type other than one of the
    /// geometry types.
    public var geometry: GeojsonObject?

    public var properties: [String: Any]

    public var id: Any

    enum CodingKeys: String, CodingKey {
        case geometry = "geometry"
        case properties = "properties"
        case id = "id"
    }

    init(from decoder: Decoder) throws {
        var container = decoder.container(keyedBy: CodingKeys.self)

        self.geometry = try container.decode(GeojsonObject?.self, forKey: geometry)
        self.properties = try container.decode([String: Any].self, forKey: properties)
        self.id = try container.decode(Any.self, forKey: id)
    }

    func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encode(self.geometry, forKey: geometry)
        try container.encode(self.properties, forKey: properties)
        try container.encode(self.id, forKey: id)
    }
}
