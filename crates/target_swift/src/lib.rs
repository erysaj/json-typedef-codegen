use jtd_codegen::target::{self, inflect, metadata};
use jtd_codegen::Result;
use lazy_static::lazy_static;
use serde_json::Value;
use std::collections::{BTreeMap, BTreeSet};
use std::io::Write;

lazy_static! {
    static ref KEYWORDS: BTreeSet<String> = include_str!("keywords")
        .lines()
        .map(str::to_owned)
        .collect();
    static ref TYPE_NAMING_CONVENTION: Box<dyn inflect::Inflector + Send + Sync> =
        Box::new(inflect::KeywordAvoidingInflector::new(
            KEYWORDS.clone(),
            inflect::CombiningInflector::new(inflect::Case::pascal_case())
        ));
    static ref FIELD_NAMING_CONVENTION: Box<dyn inflect::Inflector + Send + Sync> =
        Box::new(inflect::KeywordAvoidingInflector::new(
            KEYWORDS.clone(),
            inflect::TailInflector::new(inflect::Case::camel_case())
        ));
    static ref ENUM_MEMBER_NAMING_CONVENTION: Box<dyn inflect::Inflector + Send + Sync> =
        Box::new(inflect::KeywordAvoidingInflector::new(
            KEYWORDS.clone(),
            inflect::TailInflector::new(inflect::Case::camel_case())
        ));
}

pub struct Target {}

impl Target {
    pub fn new() -> Self {
        Self {}
    }
}

impl jtd_codegen::target::Target for Target {
    type FileState = FileState;

    fn strategy(&self) -> target::Strategy {
        target::Strategy {
            file_partitioning: target::FilePartitioningStrategy::FilePerType("swift".into()),
            enum_member_naming: target::EnumMemberNamingStrategy::Modularized,
            optional_property_handling: target::OptionalPropertyHandlingStrategy::WrapWithNullable,
            booleans_are_nullable: false,
            int8s_are_nullable: false,
            uint8s_are_nullable: false,
            int16s_are_nullable: false,
            uint16s_are_nullable: false,
            int32s_are_nullable: false,
            uint32s_are_nullable: false,
            float32s_are_nullable: false,
            float64s_are_nullable: false,
            strings_are_nullable: false,
            timestamps_are_nullable: false,
            arrays_are_nullable: false,
            dicts_are_nullable: false,
            aliases_are_nullable: false,
            enums_are_nullable: false,
            structs_are_nullable: false,
            discriminators_are_nullable: false,
        }
    }

    fn name(&self, kind: target::NameableKind, parts: &[String]) -> String {
        match kind {
            target::NameableKind::Type => TYPE_NAMING_CONVENTION.inflect(parts),
            target::NameableKind::Field => FIELD_NAMING_CONVENTION.inflect(parts),
            target::NameableKind::EnumMember => ENUM_MEMBER_NAMING_CONVENTION.inflect(parts),
        }
    }

    fn expr(
        &self,
        _state: &mut FileState,
        metadata: metadata::Metadata,
        expr: target::Expr,
    ) -> String {
        if let Some(s) = metadata.get("swiftType").and_then(|v| v.as_str()) {
            return s.into();
        }

        match expr {
            target::Expr::Empty => {
                "Any".into()
            }
            target::Expr::Boolean => "Bool".into(),
            target::Expr::Int8 => "Int8".into(),
            target::Expr::Uint8 => "UInt8".into(),
            target::Expr::Int16 => "Int16".into(),
            target::Expr::Uint16 => "UInt16".into(),
            target::Expr::Int32 => "Int32".into(),
            target::Expr::Uint32 => "UInt32".into(),
            target::Expr::Float32 => "Float".into(),
            target::Expr::Float64 => "Double".into(),
            target::Expr::String => "String".into(),
            // TODO: generate implementation
            target::Expr::Timestamp => "Timestamp".into(),
            target::Expr::ArrayOf(sub_expr) => format!("[{}]", sub_expr),
            target::Expr::DictOf(sub_expr) => format!("[String: {}]", sub_expr),
            target::Expr::NullableOf(sub_expr) => format!("{}?", sub_expr),
        }
    }

    fn item(
        &self,
        out: &mut dyn Write,
        _state: &mut FileState,
        item: target::Item,
    ) -> Result<Option<String>> {
        Ok(match item {
            target::Item::Auxiliary { .. } => {
                // TODO: implement Timestamp support
                None
            }

            target::Item::Preamble => {
                writeln!(
                    out,
                    "// Code generated by jtd-codegen for Swift v{}",
                    env!("CARGO_PKG_VERSION")
                )?;

                writeln!(out)?;
                writeln!(out, "import Foundation")?;
                None
            }

            target::Item::Postamble => None,

            target::Item::Alias {
                metadata,
                name,
                type_,
            } => {
                writeln!(out)?;
                write!(out, "{}", description(&metadata, 0))?;
                writeln!(out, "typealias {} = {}", name, type_)?;

                None
            }

            target::Item::Enum {
                metadata,
                name,
                members,
            } => {
                if let Some(s) = metadata.get("swiftType").and_then(|v| v.as_str()) {
                    return Ok(Some(s.into()));
                }

                writeln!(out)?;
                write!(out, "{}", description(&metadata, 0))?;
                writeln!(out, "public enum {}: String, Codable {{", name)?;

                for (index, member) in members.into_iter().enumerate() {
                    if index != 0 {
                        writeln!(out)?;
                    }

                    write!(
                        out,
                        "{}",
                        enum_variant_description(&metadata, 1, &member.json_value)
                    )?;
                    writeln!(out, "    case {} = \"{}\"", member.name, member.json_value)?;
                }

                writeln!(out, "}}")?;

                None
            }

            target::Item::Struct {
                metadata,
                name,
                has_additional: _,
                fields,
            } => {
                if let Some(s) = metadata.get("swiftType").and_then(|v| v.as_str()) {
                    return Ok(Some(s.into()));
                }

                writeln!(out)?;
                write!(out, "{}", description(&metadata, 0))?;

                if fields.is_empty() {
                    writeln!(out, "public struct {}: Codable {{}}", name)?;
                } else {
                    writeln!(out, "public struct {}: Codable {{", name)?;
                    for (index, field) in (&fields).into_iter().enumerate() {
                        if index != 0 {
                            writeln!(out)?;
                        }

                        write!(out, "{}", description(&field.metadata, 1))?;
                        // if field.optional {
                        //     writeln!(
                        //         out,
                        //         "    #[serde(skip_serializing_if = \"Option::is_none\")]"
                        //     )?;
                        // }
                        writeln!(out, "    public var {}: {}", field.name, field.type_)?;
                    }
                    writeln!(out)?;
                    writeln!(out, "    enum CodingKeys: String, CodingKey {{")?;
                    for field in &fields {
                        writeln!(out, "        case {} = \"{}\"", field.name, field.json_name)?;
                    }
                    writeln!(out, "    }}")?;

                    writeln!(out, "}}")?;
                }

                None
            }

            target::Item::Discriminator {
                metadata,
                name,
                variants: _,
                tag_json_name: _,
                ..
            } => {
                if let Some(s) = metadata.get("swiftType").and_then(|v| v.as_str()) {
                    return Ok(Some(s.into()));
                }


                writeln!(out)?;
                write!(out, "{}", description(&metadata, 0))?;
                writeln!(out, "// Discriminator {}: NOT IMPLEMENTED", name)?;
                // writeln!(out, "#[derive(Serialize, Deserialize)]")?;
                // writeln!(out, "#[serde(tag = {:?})]", tag_json_name)?;
                // writeln!(out, "pub enum {} {{", name)?;

                // for (index, variant) in variants.into_iter().enumerate() {
                //     if index != 0 {
                //         writeln!(out)?;
                //     }

                //     writeln!(out, "    #[serde(rename = {:?})]", variant.tag_value)?;
                //     writeln!(
                //         out,
                //         "    {}({}),",
                //         inflect::Case::pascal_case().inflect(&[variant.field_name]),
                //         variant.type_name
                //     )?;
                // }

                // writeln!(out, "}}")?;

                None
            }

            target::Item::DiscriminatorVariant {
                metadata,
                name,
                fields: _,
                ..
            } => {
                if let Some(s) = metadata.get("swiftType").and_then(|v| v.as_str()) {
                    return Ok(Some(s.into()));
                }

                writeln!(out)?;
                write!(out, "{}", description(&metadata, 0))?;
                writeln!(out, "// DiscriminatorVariant {}: NOT IMPLEMENTED", name)?;

                // if fields.is_empty() {
                //     writeln!(out, "pub struct {} {{}}", name)?;
                // } else {
                //     writeln!(out, "pub struct {} {{", name)?;
                //     for (index, field) in fields.into_iter().enumerate() {
                //         if index != 0 {
                //             writeln!(out)?;
                //         }

                //         write!(out, "{}", description(&field.metadata, 1))?;
                //         writeln!(out, "    #[serde(rename = {:?})]", field.json_name)?;
                //         if field.optional {
                //             writeln!(
                //                 out,
                //                 "    #[serde(skip_serializing_if = \"Option::is_none\")]"
                //             )?;
                //         }
                //         writeln!(out, "    pub {}: {},", field.name, field.type_)?;
                //     }

                //     writeln!(out, "}}")?;
                // }

                None
            }
        })
    }
}

#[derive(Default)]
pub struct FileState {}

fn description(metadata: &BTreeMap<String, Value>, indent: usize) -> String {
    doc(indent, jtd_codegen::target::metadata::description(metadata))
}

fn enum_variant_description(
    metadata: &BTreeMap<String, Value>,
    indent: usize,
    value: &str,
) -> String {
    doc(
        indent,
        jtd_codegen::target::metadata::enum_variant_description(metadata, value),
    )
}

fn doc(indent: usize, s: &str) -> String {
    let prefix = "    ".repeat(indent);
    jtd_codegen::target::fmt::comment_block("", &format!("{}/// ", prefix), "", s)
}

#[cfg(test)]
mod tests {
    mod std_tests {
        jtd_codegen_test::std_test_cases!(&crate::Target::new());
    }

    // mod optional_std_tests {
    //     jtd_codegen_test::strict_std_test_case!(
    //         &crate::Target::new(),
    //         empty_and_nonascii_properties
    //     );

    //     jtd_codegen_test::strict_std_test_case!(
    //         &crate::Target::new(),
    //         empty_and_nonascii_enum_values
    //     );
    // }
}
